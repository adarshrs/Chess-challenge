# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chess/Chesspiece.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import chess.msg

class Chesspiece(genpy.Message):
  _md5sum = "307c05ea07e91a96fc14a8ccf97033ab"
  _type = "chess/Chesspiece"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string KING=k
string QUEEN=q
string ROOK=r
string KNIGHT=n
string BISHOP=b
string PAWN=p
string EMPTY=

chess/Player player
string kind

================================================================================
MSG: chess/Player
uint8 WHITE=0
uint8 BLACK=1

uint8 id  # one of the two options above
"""
  # Pseudo-constants
  KING = 'k'
  QUEEN = 'q'
  ROOK = 'r'
  KNIGHT = 'n'
  BISHOP = 'b'
  PAWN = 'p'
  EMPTY = ''

  __slots__ = ['player','kind']
  _slot_types = ['chess/Player','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       player,kind

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Chesspiece, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.player is None:
        self.player = chess.msg.Player()
      if self.kind is None:
        self.kind = ''
    else:
      self.player = chess.msg.Player()
      self.kind = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.player.id
      buff.write(_get_struct_B().pack(_x))
      _x = self.kind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.player is None:
        self.player = chess.msg.Player()
      end = 0
      start = end
      end += 1
      (self.player.id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kind = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.player.id
      buff.write(_get_struct_B().pack(_x))
      _x = self.kind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.player is None:
        self.player = chess.msg.Player()
      end = 0
      start = end
      end += 1
      (self.player.id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kind = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
