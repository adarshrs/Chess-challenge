// Generated by gencpp from file chess/Chesspiece.msg
// DO NOT EDIT!


#ifndef CHESS_MESSAGE_CHESSPIECE_H
#define CHESS_MESSAGE_CHESSPIECE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <chess/Player.h>

namespace chess
{
template <class ContainerAllocator>
struct Chesspiece_
{
  typedef Chesspiece_<ContainerAllocator> Type;

  Chesspiece_()
    : player()
    , kind()  {
    }
  Chesspiece_(const ContainerAllocator& _alloc)
    : player(_alloc)
    , kind(_alloc)  {
  (void)_alloc;
    }



   typedef  ::chess::Player_<ContainerAllocator>  _player_type;
  _player_type player;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _kind_type;
  _kind_type kind;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(KING)
  #undef KING
#endif
#if defined(_WIN32) && defined(QUEEN)
  #undef QUEEN
#endif
#if defined(_WIN32) && defined(ROOK)
  #undef ROOK
#endif
#if defined(_WIN32) && defined(KNIGHT)
  #undef KNIGHT
#endif
#if defined(_WIN32) && defined(BISHOP)
  #undef BISHOP
#endif
#if defined(_WIN32) && defined(PAWN)
  #undef PAWN
#endif
#if defined(_WIN32) && defined(EMPTY)
  #undef EMPTY
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  KING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  QUEEN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROOK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  KNIGHT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  BISHOP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PAWN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  EMPTY;

  typedef boost::shared_ptr< ::chess::Chesspiece_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chess::Chesspiece_<ContainerAllocator> const> ConstPtr;

}; // struct Chesspiece_

typedef ::chess::Chesspiece_<std::allocator<void> > Chesspiece;

typedef boost::shared_ptr< ::chess::Chesspiece > ChesspiecePtr;
typedef boost::shared_ptr< ::chess::Chesspiece const> ChesspieceConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Chesspiece_<ContainerAllocator>::KING =
        
          "k"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Chesspiece_<ContainerAllocator>::QUEEN =
        
          "q"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Chesspiece_<ContainerAllocator>::ROOK =
        
          "r"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Chesspiece_<ContainerAllocator>::KNIGHT =
        
          "n"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Chesspiece_<ContainerAllocator>::BISHOP =
        
          "b"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Chesspiece_<ContainerAllocator>::PAWN =
        
          "p"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Chesspiece_<ContainerAllocator>::EMPTY =
        
          ""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chess::Chesspiece_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chess::Chesspiece_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chess::Chesspiece_<ContainerAllocator1> & lhs, const ::chess::Chesspiece_<ContainerAllocator2> & rhs)
{
  return lhs.player == rhs.player &&
    lhs.kind == rhs.kind;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chess::Chesspiece_<ContainerAllocator1> & lhs, const ::chess::Chesspiece_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chess

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chess::Chesspiece_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chess::Chesspiece_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chess::Chesspiece_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chess::Chesspiece_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess::Chesspiece_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess::Chesspiece_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chess::Chesspiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "307c05ea07e91a96fc14a8ccf97033ab";
  }

  static const char* value(const ::chess::Chesspiece_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x307c05ea07e91a96ULL;
  static const uint64_t static_value2 = 0xfc14a8ccf97033abULL;
};

template<class ContainerAllocator>
struct DataType< ::chess::Chesspiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chess/Chesspiece";
  }

  static const char* value(const ::chess::Chesspiece_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chess::Chesspiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string KING=k\n"
"string QUEEN=q\n"
"string ROOK=r\n"
"string KNIGHT=n\n"
"string BISHOP=b\n"
"string PAWN=p\n"
"string EMPTY=\n"
"\n"
"chess/Player player\n"
"string kind\n"
"\n"
"================================================================================\n"
"MSG: chess/Player\n"
"uint8 WHITE=0\n"
"uint8 BLACK=1\n"
"\n"
"uint8 id  # one of the two options above\n"
;
  }

  static const char* value(const ::chess::Chesspiece_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chess::Chesspiece_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.player);
      stream.next(m.kind);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chesspiece_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chess::Chesspiece_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chess::Chesspiece_<ContainerAllocator>& v)
  {
    s << indent << "player: ";
    s << std::endl;
    Printer< ::chess::Player_<ContainerAllocator> >::stream(s, indent + "  ", v.player);
    s << indent << "kind: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.kind);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHESS_MESSAGE_CHESSPIECE_H
