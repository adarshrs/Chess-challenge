// Generated by gencpp from file chess/Chessboard.msg
// DO NOT EDIT!


#ifndef CHESS_MESSAGE_CHESSBOARD_H
#define CHESS_MESSAGE_CHESSBOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <chess/Chesspiece.h>

namespace chess
{
template <class ContainerAllocator>
struct Chessboard_
{
  typedef Chessboard_<ContainerAllocator> Type;

  Chessboard_()
    : squares()  {
    }
  Chessboard_(const ContainerAllocator& _alloc)
    : squares()  {
  (void)_alloc;
      squares.assign( ::chess::Chesspiece_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::chess::Chesspiece_<ContainerAllocator> , 64>  _squares_type;
  _squares_type squares;





  typedef boost::shared_ptr< ::chess::Chessboard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chess::Chessboard_<ContainerAllocator> const> ConstPtr;

}; // struct Chessboard_

typedef ::chess::Chessboard_<std::allocator<void> > Chessboard;

typedef boost::shared_ptr< ::chess::Chessboard > ChessboardPtr;
typedef boost::shared_ptr< ::chess::Chessboard const> ChessboardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chess::Chessboard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chess::Chessboard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chess::Chessboard_<ContainerAllocator1> & lhs, const ::chess::Chessboard_<ContainerAllocator2> & rhs)
{
  return lhs.squares == rhs.squares;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chess::Chessboard_<ContainerAllocator1> & lhs, const ::chess::Chessboard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chess

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chess::Chessboard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chess::Chessboard_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chess::Chessboard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chess::Chessboard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess::Chessboard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess::Chessboard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chess::Chessboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9b8a96936f1ecbd729fc4d2fa9fe3ce";
  }

  static const char* value(const ::chess::Chessboard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9b8a96936f1ecbdULL;
  static const uint64_t static_value2 = 0x729fc4d2fa9fe3ceULL;
};

template<class ContainerAllocator>
struct DataType< ::chess::Chessboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chess/Chessboard";
  }

  static const char* value(const ::chess::Chessboard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chess::Chessboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chess/Chesspiece[64] squares\n"
"\n"
"================================================================================\n"
"MSG: chess/Chesspiece\n"
"string KING=k\n"
"string QUEEN=q\n"
"string ROOK=r\n"
"string KNIGHT=n\n"
"string BISHOP=b\n"
"string PAWN=p\n"
"string EMPTY=\n"
"\n"
"chess/Player player\n"
"string kind\n"
"\n"
"================================================================================\n"
"MSG: chess/Player\n"
"uint8 WHITE=0\n"
"uint8 BLACK=1\n"
"\n"
"uint8 id  # one of the two options above\n"
;
  }

  static const char* value(const ::chess::Chessboard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chess::Chessboard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.squares);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chessboard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chess::Chessboard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chess::Chessboard_<ContainerAllocator>& v)
  {
    s << indent << "squares[]" << std::endl;
    for (size_t i = 0; i < v.squares.size(); ++i)
    {
      s << indent << "  squares[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::chess::Chesspiece_<ContainerAllocator> >::stream(s, indent + "    ", v.squares[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHESS_MESSAGE_CHESSBOARD_H
